"""
Streamlit dashboard that visualises telemetry metrics produced by the MCP server.

Usage:
    streamlit run streamlit/telemetry_dashboard.py

The app watches the JSON snapshot generated by
`packages/mcp-server/src/telemetry.ts` (default: logs/telemetry_latest.json)
and renders aggregate metrics in a live-updating table and chart.
"""

from __future__ import annotations

import json
import os
from pathlib import Path
from typing import List, Dict, Any

import streamlit as st  # type: ignore


DEFAULT_SNAPSHOT = Path(os.environ.get("TELEMETRY_SNAPSHOT", "logs/telemetry_latest.json"))


def load_snapshot(snapshot_path: Path) -> List[Dict[str, Any]]:
    if not snapshot_path.exists():
        return []
    try:
        with snapshot_path.open("r", encoding="utf-8") as fh:
            data = json.load(fh)
        if isinstance(data, list):
            return data  # type: ignore[return-value]
    except json.JSONDecodeError:
        return []
    return []


def render_table(entries: List[Dict[str, Any]]) -> None:
    if not entries:
        st.info("Telemetry snapshot is empty. Trigger a request or generate a panel via MCP first.")
        return
    st.dataframe(entries, hide_index=True, use_container_width=True)


def render_metrics(entries: List[Dict[str, Any]]) -> None:
    if not entries:
        return
    col1, col2, col3 = st.columns(3)
    total_requests = sum(item.get("count", 0) for item in entries)
    total_duration = sum(item.get("total", 0.0) for item in entries)
    col1.metric("Total Requests", total_requests)
    col2.metric("Total Duration (ms)", f"{total_duration:.0f}")
    avg_latency = (total_duration / total_requests) if total_requests else 0.0
    col3.metric("Average Latency (ms)", f"{avg_latency:.2f}")


def main() -> None:
    st.set_page_config(page_title="MCP Telemetry Dashboard", layout="wide")
    st.title("MCP Telemetry Dashboard")
    st.caption("Live view of metrics emitted by the local MCP server.")

    snapshot_str = st.sidebar.text_input("Telemetry snapshot path", str(DEFAULT_SNAPSHOT))
    snapshot_path = Path(snapshot_str).expanduser().resolve()
    auto_refresh = st.sidebar.checkbox("Auto refresh", value=True)
    refresh_interval = st.sidebar.slider("Refresh interval (seconds)", min_value=5, max_value=60, value=10)

    if st.sidebar.button("Generate panel (via CLI)"):
        st.sidebar.info("Run `npm -w packages/mcp-server run generate-telemetry` to regenerate the JSON snapshot.")

    st.sidebar.write(f"Snapshot location: `{snapshot_path}`")

    refresh_trigger = st.autorefresh(interval=refresh_interval * 1000, limit=None) if auto_refresh else 0
    st.write(f"Refresh counter: {refresh_trigger}")

    entries = load_snapshot(snapshot_path)
    render_metrics(entries)
    st.subheader("Requests")
    render_table(entries)


if __name__ == "__main__":
    main()

